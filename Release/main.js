/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class CodeView extends obsidian.MarkdownView {
    constructor(leaf, ext, plugin) {
        super(leaf);
        this.ext = ext;
        console.log(ext);
        this.plugin = plugin;
        this.app.workspace.onLayoutReady(() => {
            this.contentEl.addClass("CodeView");
        });
    }
    setViewData(data, clear) {
        const _super = Object.create(null, {
            setViewData: { get: () => super.setViewData }
        });
        return __awaiter(this, void 0, void 0, function* () {
            switch (this.file.extension) {
                case "js":
                    this.sourceMode.cmEditor.setOption("mode", "javascript");
                    break;
                case "css":
                    this.sourceMode.cmEditor.setOption("mode", "css");
                    break;
            }
            const [vaultPath, realPath] = this.plugin.getMirrorPath(this.file.name, this.file.path, this.file.extension);
            if (vaultPath) {
                try {
                    //@ts-ignore
                    data = yield this.plugin.app.vault.readRaw(vaultPath);
                }
                catch (e) {
                    console.log(e);
                }
            }
            _super.setViewData.call(this, data, clear);
        });
    }
    ;
    save(clear) {
        const _super = Object.create(null, {
            save: { get: () => super.save }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const [vaultPath, realPath] = this.plugin.getMirrorPath(this.file.name, this.file.path, this.file.extension);
            if (realPath) {
                //@ts-ignore
                yield this.plugin.app.vault.adapter.fsPromises.writeFile(realPath, this.data);
            }
            yield _super.save.call(this, clear);
        });
    }
    canAcceptExtension(extension) {
        return extension == this.ext;
    }
    getViewType() {
        return this.ext;
    }
}

const DEFAULT_SETTINGS = {
    mirrorFolderPath: 'CSS-snippets-themes',
    mirroringEnabled: false,
    fileEventHandlerEnabled: false,
};
class CodeViewSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    hide() {
        return __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.mirrorFolderPath = obsidian.normalizePath(this.plugin.settings.mirrorFolderPath);
            yield this.plugin.saveSettings();
            if (this.requestMirrorRefresh) {
                yield this.plugin.runMirror();
            }
        });
    }
    display() {
        //@ts-ignore
        const configDir = this.plugin.app.vault.configDir;
        this.requestMirrorRefresh = false;
        let { containerEl } = this;
        this.containerEl.empty();
        containerEl.createEl("p", null, (el) => {
            el.textContent = `While I made every effort to make CodeView simple and safe, there is always a risk. Please read the below carefully. ` +
                `It is always best to have a backup of your data, in this case a backup of your js code, your css themes and snippets.`;
        });
        let mirrorToggle;
        new obsidian.Setting(containerEl)
            .setName("Enable css snippets and themes mirroring")
            .setDesc(`If you turn this on then "${configDir}/snippets" and "${configDir}/themes" will be copied to the mirror folder specified below. The ` +
            `mirror does not actively monitor the snippets and themes folders. If you place new files in snippets or themes these will be picked up ` +
            `when you restart Obsidian, or when you run "Refresh mirror of snippets and themes" from Command Palette`)
            .addToggle(toggle => {
            mirrorToggle = toggle;
            toggle
                .setValue(this.plugin.settings.mirroringEnabled)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.mirroringEnabled = value;
                yield this.plugin.saveSettings();
                this.requestMirrorRefresh = value;
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("CSS snippet mirror folder")
            .setDesc(`Folder to use as a mirror of the "${configDir}/snippets" and "${configDir}/themes" css files.`)
            .addText(text => text
            .setPlaceholder('Mirror folder path')
            .setValue(this.plugin.settings.mirrorFolderPath)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            mirrorToggle.setValue(false);
            this.plugin.settings.mirrorFolderPath = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Enable file event handlers for snippets and themes")
            .setDesc(`⚠⚡⚠⚡⚠⚡ Make sure you have a backup of your snippets and themes. Only turn this on if you know what you are doing. \n` +
            `If you delete a file from your mirror folder it will be deleted from "${configDir}/snippets" or "${configDir}/themes" respectively. ` +
            `Note that moving a file out of the mirror folder will also delete the snippet or theme from the "${configDir}/" folder. Moving it back will create it in the "${configDir}/" folder. ` +
            `If you rename a file in the mirror folder, the snippet or theme file will be renamed as well. ` +
            `If you rename, move, or delete the complete mirror folder, the snippet and theme files will get deleted. If you move the mirror folder back to the configured location, files will be created again in the "${configDir}/" folders.` +
            `The file event handlers will only run if both mirroring is enabled and event handlers are enabled. `)
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.fileEventHandlerEnabled)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.fileEventHandlerEnabled = value;
            yield this.plugin.saveSettings();
        })));
    }
}

class CodeViewPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new CodeViewSettingTab(this.app, this));
            const register = (ext) => {
                try {
                    this.registerView(ext, (leaf) => new CodeView(leaf, ext, this));
                    this.registerExtensions([ext], ext);
                }
                catch (e) {
                    console.log("CodeView can't register extension: " + ext);
                }
            };
            register("js");
            register("css");
            this.addFileMenuItem("javascript", "js");
            this.addFileMenuItem("css", "css");
            this.addCommand({
                id: "codeview-mirror",
                name: "Refresh mirror of snippets and themes",
                checkCallback: (checking) => {
                    if (checking) {
                        return this.settings.mirroringEnabled;
                    }
                    else {
                        this.runMirror();
                        return true;
                    }
                },
            });
            const self = this;
            this.app.workspace.onLayoutReady(() => {
                self.runMirror();
                const deleteEventHandler = (file) => __awaiter(this, void 0, void 0, function* () {
                    if (!(file instanceof obsidian.TFile))
                        return;
                    if (!(this.settings.mirroringEnabled && this.settings.fileEventHandlerEnabled))
                        return;
                    const [vaultPath, realPath] = self.getMirrorPath(file.name, file.path, file.extension);
                    if (!realPath)
                        return;
                    //@ts-ignore
                    self.app.vault.adapter.fs.rm(realPath, { force: true }, () => { });
                });
                self.registerEvent(self.app.vault.on("delete", deleteEventHandler));
                const renameEventHandler = (file, oldPath) => __awaiter(this, void 0, void 0, function* () {
                    if (!(file instanceof obsidian.TFile))
                        return;
                    if (!(this.settings.mirroringEnabled && this.settings.fileEventHandlerEnabled))
                        return;
                    const [newVaultPath, newRealPath] = self.getMirrorPath(file.name, file.path, file.extension);
                    const pathParts = this.splitPath(oldPath);
                    const [oldVaultPath, oldRealPath] = self.getMirrorPath(pathParts.filename, oldPath, pathParts.extension);
                    if (!newVaultPath && !oldVaultPath)
                        return;
                    if (newVaultPath && !oldVaultPath) {
                        //file moved into folder
                        //@ts-ignore
                        yield this.app.vault.adapter.fsPromises.writeFile(newRealPath, yield this.app.vault.read(file));
                        return;
                    }
                    if (!newRealPath && oldRealPath) {
                        //file moved out of folder
                        //@ts-ignore
                        self.app.vault.adapter.fs.rm(oldRealPath, { force: true }, () => { });
                        return;
                    }
                    //file renamed within folder
                    //@ts-ignore
                    this.app.vault.adapter.fsPromises.rename(oldRealPath, newRealPath);
                });
                self.registerEvent(self.app.vault.on("rename", renameEventHandler));
            });
        });
    }
    addFileMenuItem(cmMode, ext) {
        this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
            menu.addItem((item) => {
                item.setTitle(`Add ${ext} file`)
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    let folderpath = file.path;
                    if (file instanceof obsidian.TFile) {
                        folderpath = obsidian.normalizePath(file.path.substr(0, file.path.lastIndexOf(file.name)));
                    }
                    const fpath = this.getNewUniqueFilepath("untitled", ext, folderpath);
                    yield this.app.vault.create(fpath, "");
                    const leaf = this.app.workspace.getLeaf();
                    leaf.setViewState({ type: ext, state: { file: fpath } });
                }));
            });
        }));
    }
    getNewUniqueFilepath(basename, ext, folderpath) {
        let fpath = obsidian.normalizePath(`${folderpath}/${basename}.${ext}`);
        let i = 0;
        while (this.app.vault.getAbstractFileByPath(fpath)) {
            fpath = obsidian.normalizePath(`${folderpath}/${basename}_${i++}.${ext}`);
        }
        return fpath;
    }
    splitPath(filepath) {
        const lastSlash = filepath.lastIndexOf("/");
        const lastDot = filepath.lastIndexOf(".");
        return {
            filename: lastSlash === -1 ? filepath : filepath.substr(lastSlash + 1),
            extension: lastDot === -1 ? "" : filepath.substr(lastDot + 1),
        };
    }
    checkAndCreateFolder(folderpath) {
        return __awaiter(this, void 0, void 0, function* () {
            folderpath = obsidian.normalizePath(folderpath);
            let folder = this.app.vault.getAbstractFileByPath(folderpath);
            if (folder && folder instanceof obsidian.TFolder)
                return;
            yield this.app.vault.createFolder(folderpath);
        });
    }
    runMirror() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.settings.mirroringEnabled)
                return;
            yield this.checkAndCreateFolder(this.settings.mirrorFolderPath);
            const configDir = this.app.vault.configDir;
            const run = (type) => __awaiter(this, void 0, void 0, function* () {
                yield this.checkAndCreateFolder(`${this.settings.mirrorFolderPath}/${type}`);
                //@ts-ignore
                const path = this.app.vault.adapter.getFullRealPath(`${configDir}/${type}`);
                //@ts-ignore
                this.app.vault.adapter.fs.readdir(path, "", (e, files) => {
                    if (e) {
                        console.log(e);
                        return;
                    }
                    files.forEach((cssFile) => __awaiter(this, void 0, void 0, function* () {
                        const snippetVaultPath = `${configDir}/${type}/${cssFile}`;
                        const snippetMirrorPath = obsidian.normalizePath(`${this.settings.mirrorFolderPath}/${type}/${cssFile}`);
                        const snippetMirrorFile = this.app.vault.getAbstractFileByPath(snippetMirrorPath);
                        //@ts-ignore
                        const snippetString = yield this.app.vault.readRaw(snippetVaultPath);
                        if (!snippetMirrorFile) {
                            this.app.vault.create(snippetMirrorPath, snippetString);
                        }
                        else {
                            this.app.vault.modify(snippetMirrorFile, snippetString);
                        }
                    }));
                });
            });
            run("snippets");
            run("themes");
        });
    }
    getMirrorPath(fileName, filePath, extension) {
        if (!(this.settings.mirroringEnabled && extension === "css"))
            return [null, null];
        const snippetMirrorPath = obsidian.normalizePath(`${this.settings.mirrorFolderPath}/snippets/${fileName}`);
        const themeMirrorPath = obsidian.normalizePath(`${this.settings.mirrorFolderPath}/themes/${fileName}`);
        let type = null;
        if (snippetMirrorPath === filePath)
            type = "snippets";
        if (themeMirrorPath === filePath)
            type = "themes";
        if (type) {
            const configDir = this.app.vault.configDir;
            const vaultPath = `${configDir}/${type}/${fileName}`;
            //@ts-ignore
            const realPath = this.app.vault.adapter.getFullRealPath(`${configDir}/${type}/${fileName}`);
            return [vaultPath, realPath];
        }
        return [null, null];
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
}

module.exports = CodeViewPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
